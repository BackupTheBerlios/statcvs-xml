<?xml version="1.0"?>

<!-- 
/*
 * Copyright 2001-2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 -->

<!-- ==================================================================
       Generate CVS statistics on the current CVS project
        
       Note: Needs JDK 1.4+        
     ================================================================== -->
<project 
  xmlns:j="jelly:core"
  xmlns:util="jelly:util"
  xmlns:ant="jelly:ant"
  xmlns:doc="doc">
  
  <!--==================================================================-->
  <!-- Goal to check for JDK 1.4 and to initialize variables            -->
  <!--==================================================================-->
  <goal name="statcvs:init">
	<ant:available property="jdk14" classname="java.lang.CharSequence"/>
    <j:if test="${jdk14 != 'true'}">
      <ant:fail>The StatCvs plugin requires JDK 1.4+</ant:fail>
    </j:if>
  </goal>

  <j:set var="scmMethod" value="${maven.scm.method}"/>

  <!--==================================================================-->
  <!-- Goal to validate SCM properties [copied from scm plugin]         -->
  <!--==================================================================-->
  <goal name="statcvs:parse-connection">
    <j:set var="checkValue" value="${maven.scm.ignore.pom.connection}"/>
    <j:if test="${!checkValue}">
      <j:set var="checkValue" value="${maven.scm.ignore.pom.developerConnection}"/>
      <j:if test="${!checkValue}">
        <j:set var="value" value="${pom.repository.developerConnection}"/>
        <j:if test="${!empty(value)}">
          <echo>Using connection: ${pom.repository.developerConnection}</echo>
          <j:set var="conn" value="${pom.repository.developerConnection}" />
        </j:if>
      </j:if>

      <j:if test="${conn == null}">
        <j:set var="value" value="${pom.repository.connection}"/>
        <j:if test="${!empty(value)}">
          <echo>Using connection: ${pom.repository.connection}</echo>
          <j:set var="conn" value="${pom.repository.connection}" />
        </j:if>
      </j:if>
    </j:if>

    <j:if test="${conn != null}">
      <j:set var="delim" value=":"/>
      <j:if test="${value.length() gt 3}">
        <j:set var="delim" value="${value.substring(3, 4)}"/>
      </j:if>
      <util:tokenize var="tokens" delim="${delim}">${conn}</util:tokenize>
      <j:if test="${tokens[0] != 'scm'}">
        <ant:fail>Invalid repository connection format</ant:fail>
      </j:if>
      <j:set var="maven.scm.method" value="${tokens[1]}"/>
      <j:set var="scmMethod" value="${maven.scm.method}"/>
      <j:if test="${scmMethod == 'cvs'}">
        <j:choose>
          <j:when test="${tokens[2] == 'local'}">
            <j:set var="maven.scm.cvs.root" value=":${tokens[2]}:${tokens[3]}"/>
            <j:set var="maven.scm.cvs.module" value="${tokens[4]}"/>
          </j:when>
          <j:otherwise>
            <j:set var="maven.scm.cvs.root" value=":${tokens[2]}:${tokens[3]}:${tokens[4]}"/>
            <j:set var="maven.scm.cvs.module" value="${tokens[5]}"/>
          </j:otherwise>
        </j:choose>
      </j:if>
    </j:if>
  </goal>

  <goal name="statcvs:validate" prereqs="statcvs:parse-connection">
    <j:choose>
      <j:when test="${scmMethod == 'cvs'}">
        <j:set var="cvsModule" value="${maven.scm.cvs.module}"/>
        <j:if test="${empty(cvsModule)}">
          <ant:fail>You must specify maven.scm.cvs.module</ant:fail>
        </j:if>
      </j:when>
      <j:otherwise>
        <ant:fail>Unknown SCM method: '${maven.scm.method}'</ant:fail>
      </j:otherwise>
    </j:choose>
  </goal>

  <goal name="statcvs:init-variables">
	<!-- set common variables -->
	<j:set var="statcvs.logfile" 
	  value="${maven.build.dir}/statcvs.log"/>
	<ant:property name="statcvs.repository" value="${basedir}"/>
	<j:set var="history" value="${statcvs.history}"/>
	  
	<!-- parse cvs connection string by calling scm plugin -->
	<attainGoal name="statcvs:validate"/>
	<j:set var="cvs.root" value="${maven.scm.cvs.root}"/>
	<j:set var="cvs.rsh" value="${maven.scm.cvs.rsh}"/>
	<j:set var="cvs.quiet" value="${maven.scm.cvs.quiet}"/>
	  <j:set var="cvs.module" value="${maven.scm.cvs.module}"/>
	
	<j:if test="${history}">
	  <j:set var="statcvs.repository" 
		value="${maven.build.dir}/statcvs/${cvs.module}"/>
	</j:if>
  </goal>
  
  <!--==================================================================-->
  <!-- Default goal                                                     -->
  <!--==================================================================-->
  <goal name="statcvs" prereqs="statcvs:generate"
	description="Generate CVS statistics for the current CVS project"/>

  <!--==================================================================-->
  <!-- Goal to create cvs log and to generate reports                   -->
  <!--==================================================================-->
  <goal name="statcvs:generate" prereqs="statcvs:init"
	description="Generate CVS statistics for the current CVS project">

	<attainGoal name="statcvs:init-variables"/>
	
    <j:choose>
      <j:when test="${maven.mode.online}">
        <ant:mkdir dir="${maven.build.dir}"/>
		
        <j:if test="${history}">
		  <!-- checkout or update repository of 1.1 revisions 
               and create cvs log from there, that includes 
			   information about all files (including deleted files) -->

		  <util:available file="${statcvs.repository}/CVS/Root">
            <j:set var="repositoryPresent" value="true"/>
          </util:available>

	      <j:choose>
            <j:when test="${repositoryPresent}">
              <ant:echo>updating...</ant:echo>
			  <ant:cvs
				command="update -r1.1" 
				dest="${statcvs.repository}"
				compression="true"
                  quiet="${cvs.quiet}"
				cvsRsh="${cvs.rsh}"
				cvsRoot="${cvs.root}"/>
			  <!-- failonerror="true"/> -->
            </j:when>
            <j:otherwise>
              <ant:echo>checking out to ${maven.build.dir}/statcvs...</ant:echo>
			  <ant:cvs
				command="checkout -r1.1 ${cvs.module}" 
				dest="${maven.build.dir}/statcvs"
				compression="true"
				quiet="${cvs.quiet}"
				cvsRsh="${cvs.rsh}"
				cvsRoot="${cvs.root}"/>
			  <!-- failonerror="true"/> -->
            </j:otherwise>
          </j:choose>
        </j:if>
		
        <ant:echo>fetching cvs logs at ${statcvs.repository}...</ant:echo>
		<ant:cvs
		  command="log ${statcvs.log.options}" 
		  output="${statcvs.logfile}"
		  dest="${statcvs.repository}"
		  compression="true"
		  quiet="${cvs.quiet}"
		  cvsRsh="${cvs.rsh}"
			cvsRoot="${cvs.root}"/>
		<!-- failonerror="true"/> -->
		
		<attainGoal name="statcvs:generate-xdoc"/>
      </j:when>
      <j:otherwise>
        <ant:echo>StatCvs can obtain statistics in the online-mode only.</ant:echo>
      </j:otherwise>
    </j:choose>
  </goal>
  
  <!--==================================================================-->
  <!-- Goal to create cvs log and to generate reports                   -->
  <!--==================================================================-->
  <goal name="statcvs:generate-xdoc" prereqs="statcvs:init">

	<attainGoal name="statcvs:init-variables"/>

	<!-- create directories for documents --> 
	<property name="maven.docs.dest" 
	  value="${pom.getPluginContext('maven-xdoc-plugin').getVariable('maven.docs.dest')}"/>
	<property name="maven.gen.docs" 
	  value="${pom.getPluginContext('maven-xdoc-plugin').getVariable('maven.gen.docs')}"/>
	<ant:mkdir dir="${maven.docs.dest}/statcvs"/>
	<ant:mkdir dir="${maven.gen.docs}/statcvs"/>
	
	<!-- run statcvs-xml -->
	<ant:property environment="env"/>
	<j:set var="maven_opts" value="${env.MAVEN_OPTS}"/>

	<j:set var="parsePOM" value="${statcvs.parsePOM}"/>
	<j:set var="authorPictures" value="${statcvs.authorPictures}"/>
	<j:set var="include" value="${statcvs.include}"/>
	<j:set var="exclude" value="${statcvs.exclude}"/>
	<j:set var="weburl" value="${pom.repository.url}"/>

	<ant:java classname="de.berlios.statcvs.xml.Main" fork="true">
	  <j:if test="${!empty(maven_opts)}">
	  	<!-- debug: <ant:echo message="MAVEN_OPTS is set to =
	  ${maven_opts}"/> -->
		<ant:jvmarg line="${maven_opts}"/>
	  </j:if>
	  <ant:arg line="-output-dir '${maven.gen.docs}/statcvs'"/>
	  <ant:arg line="-title '${statcvs.title}'"/>
	  <ant:arg line="-renderer xdoc"/> 
	  <j:if test="${statcvs.verbose}">
		<ant:arg line="-verbose"/> 
	  </j:if>
	  <j:if test="${!empty(weburl)}">
		<ant:arg line="-weburl '${weburl}'"/>
	  </j:if>
	  <j:if test="${!empty(include)}">
		<ant:arg line="-include '${include}'"/>
	  </j:if>
	  <j:if test="${!empty(exclude)}">
		<ant:arg line="-exclude '${exclude}'"/>
	  </j:if>
	  <ant:arg value="${statcvs.logfile}"/>
	  <ant:arg value="${statcvs.repository}"/>
	  <j:if test="${statcvs.parsePOM}">
		<ant:arg line="-maven"/> 
	  </j:if>
	  <j:if test="!${statcvs.authorPictures}">
		<ant:arg line="-no-images"/> 
	  </j:if>
	  <ant:classpath>
		<ant:pathelement location="${plugin.getDependencyPath('statcvs:statcvs-xml')}"/>
		<ant:pathelement location="${plugin.getDependencyPath('jfreechart:jfreechart')}"/>
		<ant:pathelement location="${plugin.getDependencyPath('jcommon:jcommon')}"/>
		<ant:pathelement location="${plugin.getDependencyPath('jdom:jdom')}"/>
		<ant:pathelement location="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
		<ant:pathelement location="${plugin.getDependencyPath('commons-jexl:commons-jexl'	)}"/>
	  </ant:classpath>
	</ant:java>
	
	<!-- copy images  -->
	<copy todir="${maven.docs.dest}/statcvs" overwrite="yes" 
	  filtering="no">
	  <fileset dir="${maven.gen.docs}/statcvs">
		<include name="**/*.png"/>
	  </fileset>
	</copy>
  </goal>
  
  <!--==================================================================-->
  <!-- Goal to register as report                                       -->
  <!--==================================================================-->
  <goal name="maven-statcvs-plugin:register" prereqs="statcvs:init">
    <doc:registerReport 
	  name="StatCvs Report" 
	  pluginName="statcvs"
	  link="statcvs/index"
	  description="Show some statistics about the CVS repository"/>
  </goal>
  
  <!--==================================================================-->
  <!-- Goal to deregister as report                                     -->
  <!--==================================================================-->
  <goal name="maven-statcvs-plugin:deregister" prereqs="statcvs:init">
    <doc:deregisterReport name="StatCvs Report"/>
  </goal>
  
  <!--==================================================================-->
  <!-- Goal to call goal to generate report                             -->
  <!--==================================================================-->
  <goal name="statcvs:report" prereqs="statcvs"/>

</project>

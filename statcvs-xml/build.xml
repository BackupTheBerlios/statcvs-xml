<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="statcvs" default="echo" basedir=".">

	<property name="project" value="statcvs"/>
	<property name="projectpath" value="net/sf/${project}"/>
	<property name="src" value="src"/>
	<property name="src.tests" value="tests-src"/>
	<property name="build" value="build"/>
	<property name="build.tests" value="build-tests"/>
	<property name="dist" value="dist"/>
	<property name="lib" value="lib"/>
	<property name="doc" value="doc"/>
	<property name="stats" value="stats"/>
	<property name="cvs.logfile" value="cvs.log"/>
	<property environment="env"/>
   
	<path id="project.class.path">
		<pathelement path="${java.class.path}"/>
			<fileset dir="${lib}">
				<include name="**/*.jar"/>
			</fileset>
	</path>
	
	<target name="echo">
		<echo>
	Usage:

	echo    	- shows this message
	compile 	- compiles the java files
	dist    	- creates statcvs.jar
	release 	- creates a release .zip file
	javadoc 	- creates the javadoc of statcvs
	run     	- runs StatCvs on itself
	clean   	- cleans the source directories, deletes build and dist
	test		- runs JUnit tests
	cvs.update	- updates from CVS repository
	cvs.log		- saves a cvs log to disk
	stats		- short for cvs.update, cvs.log, run
		</echo>
	</target>
	
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${build.tests}"/>
	</target>
	
	<target name="compile" depends="init" description="compiles ${project}">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" debug="on">
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile.tests" depends="init,compile"
			description="compiles the unit tests">
		<!-- Compile the unit tests from ${src.tests} into ${build.tests} -->
		<javac srcdir="${src.tests}" destdir="${build.tests}" debug="on">
			<classpath>
				<path refid="project.class.path"/>
				<pathelement path="${build}"/>
			</classpath>
		</javac>
	</target>
			
	<target name="clean">
		<!-- Delete all directory trees created by the build file -->
		<delete dir="${build}" failonerror="false"/>
		<delete dir="${build.tests}" failonerror="false"/>
		<delete dir="${project}" failonerror="false"/>
		<delete dir="${dist}" failonerror="false"/>
		<delete dir="${doc}" failonerror="false"/>
		<delete dir="${stats}" failonerror="false"/>
	</target>
	
	<target name="run" depends="compile,copyconfig">
		<!-- Runs StatCvs on itself  -->
		<java classname="net.sf.${project}.Main" fork="yes">
			<arg line="-title StatCvs -output-dir ${stats} -notes report-notes.txt -viewcvs http://cvs.sf.net/cgi-bin/viewcvs.cgi/statcvs/statcvs ${cvs.logfile} ."/>
			<classpath>
				<path refid="project.class.path"/>
				<pathelement path="${build}"/>
			</classpath>
		</java>
	</target>
	
	<target name="test" depends="compile.tests,copyconfig">
		<!-- Runs JUnit tests using the text-only TestRunner -->
		<java classname="junit.textui.TestRunner" fork="yes">
			<arg value="net.sf.${project}.AllTests"/>
			<classpath>
				<path refid="project.class.path"/>
				<pathelement path="${build}"/>
				<pathelement path="${build.tests}"/>
			</classpath>
		</java>
	</target>
	
	<target name="dist" depends="compile,copyconfig">
		<!-- Creates an executable jar file for the project -->
		<unjar src="${lib}/jfreechart.jar" dest="${build}" />
		<mkdir dir="${dist}"/>
		<jar jarfile="${dist}/${project}.jar" basedir="${build}">
			<manifest>
				<attribute name="Main-Class" value="net.sf.${project}.Main"/>
<!--				<attribute name="Class-Path" value="jcommon-0.6.4.jar jfreechart-0.9.2.jar"/> -->
			</manifest>
		</jar>
	</target>
	
<!--
	<target name="copylibs" depends="init">
		<copy todir="${dist}">
		    <fileset dir="${lib}">
				<include name="**/*.jar"/>
			</fileset>
	    </copy>
	</target>
-->

	<target name="copyconfig" depends="init">
		<!-- Copies non-class files from source directory to
			build directory -->
		<copy todir="${build}/${projectpath}/">
			<fileset dir="${src}/${projectpath}/">
				<include name="*.properties"/>
				<include name="web-files/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="release" depends="dist">
		<!-- Creates a release zip file -->
		<mkdir dir="${project}"/>
		<copy file="LICENSE" todir="${project}"/>
		<copy file="README" todir="${project}"/>
		<copy file="${dist}/${project}.jar" todir="${project}"/>
		<zip zipfile="${dist}/release.zip" basedir="${project}"/>
	</target>
	
	<target name="javadoc">
		<!-- Creates javadoc documentation for the source
			(but not for the tests) -->
		<delete dir="${doc}"/>
		<mkdir dir="${doc}"/>
		<javadoc packagenames="net.*"
				sourcepath="${src}"
				destdir="${doc}"
				classpathref="project.class.path"
				author="true"
				version="true"
				private="false"
				use="true"
				splitindex="true"
				windowtitle="${project}"
				doctitle="${project}">
		</javadoc>
	</target>

	<target name="cvs.update">
		<!-- Updates from repository. Only works in a checked-out
			repository with a working local CVS client
			installation -->
		<cvs command="update -d"/>
	</target>

	<target name="cvs.log">
		<!-- Saves a cvs log to disk. Only works in a checked-out
			repository with a working local CVS client
			installation -->
		<cvs command="log" output="${cvs.logfile}"/>
	</target>

	<target name="stats" depends="cvs.update,cvs.log,run">
		<!-- Updates StatCvs from the repository, compiles, and
			generates statistics for the StatCvs project.
			Needs a local CVS client installation. -->
	</target>
</project>